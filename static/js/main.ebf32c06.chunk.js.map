{"version":3,"sources":["components/Header/index.js","components/Post/index.js","components/Posts/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","React","Component","Post","nickname","this","props","avatar","image","caption","ref","src","alt","Posts","state","posts","offline","navigator","onLine","Notification","prototype","alert","requestPermission","setState","JSON","parse","localStorage","getItem","apollo_client","query","gql","then","response","data","setItem","stringify","posts_channel","pusher","subscribe","bind","concat","post","permission","body","user","icon","onclick","event","window","open","e","console","log","slice","reverse","map","key","id","client","ApolloClient","uri","App","Pusher","cluster","encrypted","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","URL","process","origin","addEventListener","fetch","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","ReactDOM","render","document","getElementById","message"],"mappings":"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","file":"static/js/main.ebf32c06.chunk.js","sourcesContent":["    // src/components/Header/index.js\r\n    import React from \"react\";\r\n    import \"./Header.css\";\r\n\r\n    class Header extends React.Component{\r\n        render(){\r\n            return (\r\n               <nav className=\"Nav\">\r\n                 <div className=\"Nav-menus\">\r\n                   <div className=\"Nav-brand\">\r\n                     <a className=\"Nav-brand-logo\" href=\"/\">\r\n                       Instagram\r\n                     </a>\r\n                   </div>\r\n                 </div>\r\n               </nav>\r\n           );\r\n        }   \r\n    }\r\n    export default Header;","import React, { Component } from \"react\";\r\n    import \"./Post.css\";\r\n    class Post extends Component {\r\n      render() {\r\n        const nickname = this.props.nickname;\r\n        const avatar = this.props.avatar;\r\n        const image = this.props.image;\r\n        const caption = this.props.caption;\r\n        return (\r\n          <article className=\"Post\" ref=\"Post\">\r\n            <header>\r\n              <div className=\"Post-user\">\r\n                <div className=\"Post-user-avatar\">\r\n                  <img src={avatar} alt={nickname} />\r\n                </div>\r\n                <div className=\"Post-user-nickname\">\r\n                  <span>{nickname}</span>\r\n                </div>\r\n              </div>\r\n            </header>\r\n            <div className=\"Post-image\">\r\n              <div className=\"Post-image-bg\">\r\n                <img alt={caption} src={image} />\r\n              </div>\r\n            </div>\r\n            <div className=\"Post-caption\">\r\n              <strong>{nickname}</strong> {caption}\r\n            </div>\r\n          </article>\r\n        );\r\n      }\r\n    }\r\n\r\n    export default Post;","import React, {Component} from \"react\";\r\nimport \"./Posts.css\";\r\nimport gql from \"graphql-tag\";\r\nimport Post from \"../Post\";\r\n//import Notifier from \"../Notifier\";\r\n\r\nclass Posts extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      posts: []\r\n    };\r\n    this.offline = !navigator.onLine;\r\n  }\r\n  componentDidMount() {\r\n\r\n    if ('actions' in Notification.prototype) {\r\n      alert('You can enjoy the notification feature');\r\n    } else {\r\n      alert('Sorry notifications are NOT supported on your browser');\r\n    }\r\n\r\n    // request permission\r\n    Notification.requestPermission();\r\n\r\n    if (this.offline) {\r\n      this.setState({ posts: JSON.parse(localStorage.getItem(\"posts\")) });\r\n    } else {\r\n      // fetch the initial posts\r\n      this.props.apollo_client\r\n        .query({\r\n          query: gql`\r\n            {\r\n              posts(user_id: \"a\") {\r\n                id\r\n                user {\r\n                  nickname\r\n                  avatar\r\n                }\r\n                image\r\n                caption\r\n              }\r\n            }\r\n          `\r\n        })\r\n        .then(response => {\r\n          this.setState({ posts: response.data.posts });\r\n          localStorage.setItem(\"posts\", JSON.stringify(response.data.posts));\r\n        });\r\n    }\r\n    //  subscribe to posts channel\r\n    this.posts_channel = this.props.pusher.subscribe(\"posts-channel\");\r\n\r\n    // listen for a new post\r\n    this.posts_channel.bind(\r\n      \"new-post\",\r\n      data => {\r\n        this.setState({ posts: this.state.posts.concat(data.post) });\r\n\r\n        // check for notifications\r\n        if (Notification.permission === \"granted\") {\r\n          try {\r\n            // notify user of new post\r\n            let notification = new Notification(\"인스타 클론\", {\r\n              body: `${data.post.user.nickname}로의 새 게시물입니다.`,\r\n              icon: \"https://img.stackshare.io/service/115/Pusher_logo.png\",\r\n              image: `${data.post.image}`\r\n            });\r\n\r\n            // 클릭되면 웹사이트 열기.\r\n            notification.onclick = function(event) {\r\n              window.open(\"http://localhost:3000\", \"_blank\");\r\n            };\r\n          } catch (e) {\r\n            console.log(\"Error displaying notification\",e);\r\n          }\r\n        }\r\n      },\r\n      this\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"Posts\">\r\n          {this.state.posts\r\n            .slice(0)\r\n            .reverse()\r\n            .map(post => (\r\n              <Post\r\n                nickname={post.user.nickname}\r\n                avatar={post.user.avatar}\r\n                image={post.image}\r\n                caption={post.caption}\r\n                key={post.id}\r\n              />\r\n            ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posts;","// src.App.js\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Posts from './components/Posts';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from \"react-apollo\";\nimport Pusher from 'pusher-js';\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/graphql\"\n});\n\nclass App extends Component{\n  constructor(){\n    super();\n    // connect to pusher\n    this.pusher = new Pusher(\"PUSHER_APP_KEY\", {\n     cluster: 'eu',\n     encrypted: true\n    });\n  }\n\n  render(){\n    return (\n      <ApolloProvider client={client}>\n        <div className=\"App\">\n          <Header />\n          <section className=\"App-main\">\n            {/* pass the pusher object and apollo to the posts component */}\n            <Posts pusher={this.pusher} apollo_client={client}/>\n          </section>\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nserviceWorker.register();\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}